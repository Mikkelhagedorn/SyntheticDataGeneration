# Part of the code for this project was generated by ChatGPT.


#pip install transformers scikit-learn torch transformers[torch] accelerate -U

#Import of packages
from transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import pandas as pd
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader


#SST DATASET 
train_data = pd.read_csv('Datasæt final/Original_train.csv')
#train_data = pd.read_csv('Datasæt final/sst_paraphrase_05.csv')
#train_data = pd.read_csv('Datasæt final/paraphrase_15_v2.csv')
#train_data = pd.read_csv('Datasæt final/sst_chatgpt.csv')
#train_data = pd.read_csv('Datasæt final/original_plus_chatgpt.csv')
#train_data = pd.read_csv('Datasæt final/sst_paraphrase_original_and_05.csv')

#COLA DATASET
#train_data = pd.read_csv('Datasæt Cola/cola_train.csv')
#train_data = pd.read_csv('Datasæt Cola/cola_paraphrase05.csv')
#train_data = pd.read_csv('Datasæt Cola/cola_paraphrase_15.csv')
#train_data = pd.read_csv('Datasæt Cola/cola_chatgpt.csv')
#train_data = pd.read_csv('Datasæt Cola/cola_original_para05.csv')
#train_data = pd.read_csv('Datasæt Cola/cola_original_chatgpt.csv')

# SST DEV DATASET
dev_data = pd.read_csv('Datasæt final/dev.csv')

# COLA DEV DATASET
#dev_data = pd.read_csv('Datasæt Cola/dev.csv')

#SST TEST DATASET
test_data = pd.read_csv('Datasæt final/Original_test.csv')

#Stanford IMDB TEST DATASET
#test_data = pd.read_csv('Datasæt final/IMDB_dataset.csv')

#COLA TEST DATASET
#test_data = pd.read_csv('Datasæt Cola/cola_test.csv')


class TextDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)
    
#Using DistilBert Base Uncased as tokenizer
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

def tokenize_data(data):
    return tokenizer(data['sentence'].tolist(), truncation=True, padding=True, max_length=512)

train_encodings = tokenize_data(train_data)
val_encodings = tokenize_data(dev_data)
test_encodings = tokenize_data(test_data)

train_dataset = TextDataset(train_encodings, train_data['label'].tolist())
val_dataset = TextDataset(val_encodings, dev_data['label'].tolist())
test_dataset = TextDataset(test_encodings, test_data['label'].tolist())

#Loading the model
model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased')

#Parameter values 
training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=3,              # Value of 3 was chosen due to computational requirements
    per_device_train_batch_size=16,  # batch size per device during training
    per_device_eval_batch_size=64,   # batch size for evaluation
    warmup_steps=500,                
    weight_decay=0.01,              
    logging_dir='./logs',           
    logging_steps=100,
    evaluation_strategy="epoch",     
    save_strategy="epoch",           
    save_total_limit=1,              
    load_best_model_at_end=True,     
    metric_for_best_model="eval_loss"
)

#Setting up the trainer with Train and Test datasets
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset
)

trainer.train()

#Evaluating the model
trainer.evaluate()

# Evaluating the model on the validation set
validation_metrics = trainer.evaluate(eval_dataset=val_dataset)
print("Validation Metrics:", validation_metrics)

# Evaluating the model on the test set
test_metrics = trainer.evaluate(eval_dataset=test_dataset)
print("Test Metrics:", test_metrics)

# Using the trained model on the test dataset
predictions = trainer.predict(test_dataset)

# Getting the predictions in correct format
pred_labels = np.argmax(predictions.predictions, axis=1)

# Get true labels from the test dataset
true_labels = test_data['label'].tolist()

# Generate classification report
report = classification_report(true_labels, pred_labels, target_names=['Class 0', 'Class 1'])

print(report)