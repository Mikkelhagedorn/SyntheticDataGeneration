# Part of the code for this project was generated by ChatGPT.

import openai
import csv
import re

openai.api_key = ""


df_synth = []
csv_file_path = "C:\\Users\\mikke\\OneDrive\\Dokumenter\\Onedrive2\\OneDrive\\Skrivebord\\AI ML\\exam local\\synth_data_gpt_1000rows_2temp.csv"

train_file_path = "C:\\Users\\mikke\\OneDrive\\Dokumenter\\Onedrive2\\OneDrive\\Skrivebord\\AI ML\\exam local\\train.tsv"

with open(train_file_path, 'r') as file:
    next(file) 
    i=0
    for line in file:
        if i >= 30000:
            break 
        
        sentence, _ = line.strip().split('\t')

        print("Original sentence: " + sentence)
        
        context_prompt = f"""
        
            Task: Rewrite a given sentence to maintain its original meaning, style, and tone, ensuring it fits within a movie review. The length of the revised sentence should match the original. The objective is to optimize the sentence for sentiment analysis.
            Persona: As a copywriter with expertise in film criticism, you excel in subtly modifying sentences to enhance sentiment analysis.
            Instructions: Edit the sentence as if tailoring it for a movie review, keeping the essence and style intact. The result should be suitable for sentiment analysis, presented in a seamless and original manner.
        """
        
        generation_prompt = f""" 
            Edit this sentence a little differently keeping the same meaning: "{sentence}" and only output the rewritten sentence as text. The length should be the same as the sentence.
            The rewritten sentences should make sense in a movie review. The rewritten sentences should use same style and tone of the original sentence. The output should not be a list.
            The new data should be used for sentiment analysis which it should be optimized for.
        """
        
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=[
                {"role": "system", "content": context_prompt},
                {"role": "user", "content": generation_prompt},
            ],
            temperature=0.5,
            max_tokens=60,
            top_p=1.0,
            frequency_penalty=1,
            presence_penalty=0,
            seed=i
        )
        

        generated_sentences = response.choices[0].message.content.strip().split('\n')
        for sentence in generated_sentences:
            
            print(sentence)
            with open(csv_file_path, mode='a', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)

                cleaned_sentence = re.sub(r"[\"',]", "", sentence)
                
                sentiment_context_prompt = f"""
                    Task: Assign a sentiment score from 0 (completely negative) to 1 (completely positive) to a sentence from a movie review.
                    Persona: As a sentiment analysis expert, you are adept at interpreting the emotional tone of language in film criticism.
                    Instructions: Analyze the sentiment of the provided sentence and output a single numerical score that reflects its sentiment, without additional explanation.
                
                """
                
                
                sentiment_analysis_prompt = f"""
                    Considering the nuanced sentiment of sentences from movie reviews, assign a sentiment score from 0 (completely negative) to 1 (completely positive) to the following sentence:

                    "{cleaned_sentence}". Please only output the sentiment score.
                """
                
                
                sentiment_response = openai.chat.completions.create(
                    model="gpt-3.5-turbo-0125",
                    messages=[
                        {"role": "system", "content": ""},
                        {"role": "user", "content": sentiment_analysis_prompt},
                    ],
                    temperature=0.5,
                    max_tokens=10,
                    top_p=1.0,
                    frequency_penalty=0,
                    presence_penalty=0,
                )
                sentiment_score = sentiment_response.choices[0].message.content.strip()
                
                print(sentiment_score)
                
                try:
                    
                    sentiment_score_float = float(sentiment_score)
                    sentiment_label = 1 if sentiment_score_float >= 0.5 else 0
                except ValueError:
                    
                    print(f"Error converting sentiment score to float for sentence: '{cleaned_sentence}'. Skipping...")
                    continue  
                
                #print(f"Sentence: {cleaned_sentence}")
                #print(f"Sentiment Score: {sentiment_score}\n")
                #print(f"Sentiment Label: {sentiment_label}\n")
                writer.writerow([cleaned_sentence, sentiment_label])
        
        i += 1
        
